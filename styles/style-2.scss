// Web title

$delay: 0.015s;
$duration: 0.6s;
$easing: cubic-bezier(0.76, 0, 0.24, 1);
$text-color: #b8966a;
$text-color-hover: #d9f99d;
$bg-1: #a5875f;
$bg-2: #cdb596;
$btn-height: 75px;
$btn-width: 470px;
$btn-bg-color: rgba(0, 0, 0, 0.8);
$btn-bg-hover-color: rgba(255, 255, 255, 0.1);
$btn-border-color: rgba(255, 255, 255, 0.2);
$btn-border-hover-color: rgba(255, 255, 255, 0.3);
$box-shadow-color: rgba(0, 0, 0, 0.1);

// cube

$faces: 30;
$cube-size: 15rem;
$duration: 1.2s;
$pause: 0.5s;
$delta: 0.031s;

$total-duration: $duration + ($delta * $faces) + $pause;
$easing: cubic-bezier(0.455, 0.03, 0.515, 0.955);

$color-black: #222;
$color-white: #fefefe;

.cube {
  height: $cube-size;
  width: $cube-size;
  transform-style: preserve-3d;
  transform-origin: 50% 50%;
  animation: cube $total-duration linear infinite;

  &:before,
  &:after {
    content: "";
    width: 100%;
    height: 100%;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    transform-style: preserve-3d;
    animation: cube-outer $total-duration linear infinite;
  }

  &:before {
    background: $color-black;
    transform: rotateY(-90deg) translateZ($cube-size / 2);
  }

  &:after {
    background: $color-white;
    transform: rotateX(90deg) translateZ($cube-size / 2);
  }
}

@keyframes cube {
  from {
    transform: rotateX(-30deg) rotateY(45deg);
  }
  to {
    transform: rotateX(-30deg) rotateY(135deg);
  }
}

@keyframes cube-outer {
  from {
    opacity: 1;
  }
  #{percentage($delta / $total-duration)},
  #{percentage(1 - ($delta + $pause) / $total-duration)} {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

.backface {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
  transform-style: preserve-3d;
  backface-visibility: visible;
  background: $color-black;
  transform: translateZ(#{-$cube-size / $faces}) rotateZ(-90deg) rotateY(180deg);
}

.face,
.backface {
  /* opacity: 0.5; */
  backface-visibility: visible;

  &:before,
  &:after {
    position: absolute;
    content: "";
    display: block;
  }

  &:before {
    height: 100%;
    width: $cube-size / $faces;
    transform-origin: left;
    transform: rotateY(-270deg);
    left: 0;
    top: 0;
  }

  &:after {
    width: 100%;
    height: $cube-size / $faces;
    transform-origin: top;
    transform: rotateX(270deg);
    left: 0;
    top: 0;
  }
}

.face {
  height: 100%;
  width: 100%;
  background: $color-black;
  position: absolute;
  top: 0;
  left: 0;
  transform-style: preserve-3d;
  backface-visibility: visible;

  &:last-child {
    background-color: $color-black;
  }

  &:first-child > .backface {
    background-color: gray;
  }

  &:nth-child(2n) {
    &:after {
      top: 100%;
      background: $color-white;
      animation: white-black $total-duration $easing infinite;
    }

    &:before {
      background: gray;
      animation: gray-black $total-duration $easing both infinite;
    }

    > .backface {
      &:before {
        background: $color-white;
        animation: white-black $total-duration $easing both infinite;
      }
      &:after {
        top: 100%;
        background: $color-black;
        animation: black-white $total-duration $easing both infinite;
      }
    }
  }

  &:nth-child(2n - 1) {
    &:after {
      top: 100%;
      background: $color-white;
      animation: white-black $total-duration $easing both infinite;
    }

    &:before {
      background: gray;
      animation: gray-white $total-duration $easing both infinite;
    }

    > .backface {
      transform: translateZ(#{-$cube-size / $faces}) rotateZ(-90deg)
        rotateY(180deg);

      &:before {
        background: $color-white;
        animation: white-black $total-duration $easing both infinite;
      }
      &:after {
        top: 100%;
        background: $color-white;
        animation: white-black $total-duration $easing both infinite;
      }
    }
  }

  @for $i from 1 through $faces {
    &:nth-child(#{$i}) {
      animation-name: face-#{$i};
      animation-duration: $total-duration;
      animation-timing-function: $easing;
      animation-iteration-count: infinite;
    }
  }
}

@mixin rot($face, $alt: true) {
  $face-delta: ($faces - $face) * $delta;
  $start: percentage($face-delta / $total-duration);
  $end: percentage(($face-delta + $duration) / $total-duration);

  @keyframes face-#{$face} {
    0%,
    #{$start} {
      transform: translateZ(($face * ($cube-size / $faces)) - $cube-size / 2)
        rotateZ(0deg);
    }

    #{$end},
    to {
      transform: translateZ(($face * ($cube-size / $faces)) - $cube-size / 2)
        rotateZ(if($alt, -90deg, 90deg));
    }
  }
}

@for $i from 1 through $faces / 2 {
  @include rot(2 * $i - 1, false);
  @include rot(2 * $i);
}

@keyframes side-color {
  from {
    background: $color-white;
  }
  50% {
    background: gray;
  }
  to {
    background: $color-black;
  }
}

@keyframes black-white {
  10% {
    background: $color-black;
  }
  to {
    background: $color-white;
  }
}
@keyframes gray-white {
  from,
  10% {
    background: gray;
  }
  95% {
    background: $color-white;
  }
}
@keyframes white-black {
  10% {
    background: $color-white;
  }
  to {
    background: $color-black;
  }
}
@keyframes white-gray {
  10% {
    background: $color-white;
  }
  to {
    background: gray;
  }
}
@keyframes gray-black {
  from,
  10% {
    background: gray;
  }
  95% {
    background: $color-black;
  }
}

